{"ast":null,"code":"import { ADD_TO_CART, REMOVE_FROM_CART, DECREASE_CART } from \"../Constants/types\";\nexport const addToCart = product => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice();\n  let alreadyExists = false;\n  cartItems.forEach(x => {\n    if (x._id === product._id) {\n      alreadyExists = true;\n      x.count++;\n    }\n  });\n\n  if (!alreadyExists) {\n    cartItems.push({ ...product,\n      count: 1\n    });\n  }\n\n  dispatch({\n    type: ADD_TO_CART,\n    payload: {\n      cartItems\n    }\n  });\n  localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n};\nexport const removeFromCart = product => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice().filter(x => x._id !== product._id);\n  dispatch({\n    type: REMOVE_FROM_CART,\n    payload: {\n      cartItems\n    }\n  });\n  localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n};\nexport const decreaseCart = product => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice();\n  let alreadyExists = false;\n  cartItems.forEach(x => {\n    if (x._id === product._id) {\n      alreadyExists = true;\n      x.count--;\n    }\n  });\n\n  if (alreadyExists && product.count < 1) {\n    cartItems.pop({\n      product\n    });\n  }\n\n  dispatch({\n    type: DECREASE_CART,\n    payload: {\n      cartItems\n    }\n  });\n  localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n};","map":{"version":3,"sources":["/home/kit/Documents/MERN/ReactBakery/client/src/Actions/cartActions.js"],"names":["ADD_TO_CART","REMOVE_FROM_CART","DECREASE_CART","addToCart","product","dispatch","getState","cartItems","cart","slice","alreadyExists","forEach","x","_id","count","push","type","payload","localStorage","setItem","JSON","stringify","removeFromCart","filter","decreaseCart","pop"],"mappings":"AAAA,SACCA,WADD,EAECC,gBAFD,EAGCC,aAHD,QAIO,oBAJP;AAMA,OAAO,MAAMC,SAAS,GAAIC,OAAD,IAAa,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC7D,QAAMC,SAAS,GAAGD,QAAQ,GAAGE,IAAX,CAAgBD,SAAhB,CAA0BE,KAA1B,EAAlB;AACA,MAAIC,aAAa,GAAG,KAApB;AACAH,EAAAA,SAAS,CAACI,OAAV,CAAmBC,CAAD,IAAO;AACxB,QAAIA,CAAC,CAACC,GAAF,KAAUT,OAAO,CAACS,GAAtB,EAA2B;AAC1BH,MAAAA,aAAa,GAAG,IAAhB;AACAE,MAAAA,CAAC,CAACE,KAAF;AACA;AACD,GALD;;AAMA,MAAI,CAACJ,aAAL,EAAoB;AACnBH,IAAAA,SAAS,CAACQ,IAAV,CAAe,EACd,GAAGX,OADW;AAEdU,MAAAA,KAAK,EAAE;AAFO,KAAf;AAIA;;AACDT,EAAAA,QAAQ,CAAC;AACRW,IAAAA,IAAI,EAAEhB,WADE;AAERiB,IAAAA,OAAO,EAAE;AAAEV,MAAAA;AAAF;AAFD,GAAD,CAAR;AAIAW,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAed,SAAf,CAAlC;AACA,CApBM;AAsBP,OAAO,MAAMe,cAAc,GAAIlB,OAAD,IAAa,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAClE,QAAMC,SAAS,GAAGD,QAAQ,GACxBE,IADgB,CACXD,SADW,CACDE,KADC,GAEhBc,MAFgB,CAERX,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAUT,OAAO,CAACS,GAFhB,CAAlB;AAGAR,EAAAA,QAAQ,CAAC;AACRW,IAAAA,IAAI,EAAEf,gBADE;AAERgB,IAAAA,OAAO,EAAE;AAAEV,MAAAA;AAAF;AAFD,GAAD,CAAR;AAIAW,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAed,SAAf,CAAlC;AACA,CATM;AAWP,OAAO,MAAMiB,YAAY,GAAIpB,OAAD,IAAa,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAChE,QAAMC,SAAS,GAAGD,QAAQ,GAAGE,IAAX,CAAgBD,SAAhB,CAA0BE,KAA1B,EAAlB;AACA,MAAIC,aAAa,GAAG,KAApB;AACAH,EAAAA,SAAS,CAACI,OAAV,CAAmBC,CAAD,IAAO;AACxB,QAAIA,CAAC,CAACC,GAAF,KAAUT,OAAO,CAACS,GAAtB,EAA2B;AAC1BH,MAAAA,aAAa,GAAG,IAAhB;AACAE,MAAAA,CAAC,CAACE,KAAF;AACA;AACD,GALD;;AAMA,MAAIJ,aAAa,IAAIN,OAAO,CAACU,KAAR,GAAgB,CAArC,EAAwC;AACvCP,IAAAA,SAAS,CAACkB,GAAV,CAAc;AACbrB,MAAAA;AADa,KAAd;AAGA;;AACDC,EAAAA,QAAQ,CAAC;AACRW,IAAAA,IAAI,EAAEd,aADE;AAERe,IAAAA,OAAO,EAAE;AAAEV,MAAAA;AAAF;AAFD,GAAD,CAAR;AAIAW,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAed,SAAf,CAAlC;AACA,CAnBM","sourcesContent":["import {\n\tADD_TO_CART,\n\tREMOVE_FROM_CART,\n\tDECREASE_CART,\n} from \"../Constants/types\";\n\nexport const addToCart = (product) => (dispatch, getState) => {\n\tconst cartItems = getState().cart.cartItems.slice();\n\tlet alreadyExists = false;\n\tcartItems.forEach((x) => {\n\t\tif (x._id === product._id) {\n\t\t\talreadyExists = true;\n\t\t\tx.count++;\n\t\t}\n\t});\n\tif (!alreadyExists) {\n\t\tcartItems.push({\n\t\t\t...product,\n\t\t\tcount: 1,\n\t\t});\n\t}\n\tdispatch({\n\t\ttype: ADD_TO_CART,\n\t\tpayload: { cartItems },\n\t});\n\tlocalStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n};\n\nexport const removeFromCart = (product) => (dispatch, getState) => {\n\tconst cartItems = getState()\n\t\t.cart.cartItems.slice()\n\t\t.filter((x) => x._id !== product._id);\n\tdispatch({\n\t\ttype: REMOVE_FROM_CART,\n\t\tpayload: { cartItems },\n\t});\n\tlocalStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n};\n\nexport const decreaseCart = (product) => (dispatch, getState) => {\n\tconst cartItems = getState().cart.cartItems.slice();\n\tlet alreadyExists = false;\n\tcartItems.forEach((x) => {\n\t\tif (x._id === product._id) {\n\t\t\talreadyExists = true;\n\t\t\tx.count--;\n\t\t}\n\t});\n\tif (alreadyExists && product.count < 1) {\n\t\tcartItems.pop({\n\t\t\tproduct,\n\t\t});\n\t}\n\tdispatch({\n\t\ttype: DECREASE_CART,\n\t\tpayload: { cartItems },\n\t});\n\tlocalStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n};\n"]},"metadata":{},"sourceType":"module"}