{"ast":null,"code":"import { ADD_TO_CART, REMOVE_FROM_CART, DECREASE_CART } from '../types';\nexport const addToCart = product => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice();\n  let alreadyExists = false;\n  cartItems.forEach(x => {\n    if (x._id === product._id) {\n      alreadyExists = true;\n      x.count++;\n    }\n  });\n\n  if (!alreadyExists) {\n    cartItems.push({ ...product,\n      count: 1\n    });\n  }\n\n  dispatch({\n    type: ADD_TO_CART,\n    payload: {\n      cartItems\n    }\n  });\n  localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n};\nexport const removeFromCart = product => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice().filter(x => x._id !== product._id);\n  dispatch({\n    type: REMOVE_FROM_CART,\n    payload: {\n      cartItems\n    }\n  });\n  localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n};\nexport const decreaseCart = product => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice();\n  let alreadyExists = false;\n  cartItems.forEach(x => {\n    if (x._id === product._id) {\n      alreadyExists = true;\n      x.count--;\n    }\n  });\n\n  if (alreadyExists && product.count < 1) {\n    cartItems.pop({\n      product\n    });\n  }\n\n  dispatch({\n    type: DECREASE_CART,\n    payload: {\n      cartItems\n    }\n  });\n  localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n};","map":{"version":3,"sources":["/home/kit/Documents/MERN/ReactBakery/client/src/Actions/cartActions.js"],"names":["ADD_TO_CART","REMOVE_FROM_CART","DECREASE_CART","addToCart","product","dispatch","getState","cartItems","cart","slice","alreadyExists","forEach","x","_id","count","push","type","payload","localStorage","setItem","JSON","stringify","removeFromCart","filter","decreaseCart","pop"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,EAAwCC,aAAxC,QAA6D,UAA7D;AAEA,OAAO,MAAMC,SAAS,GAAIC,OAAD,IAAa,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC1D,QAAMC,SAAS,GAAGD,QAAQ,GAAGE,IAAX,CAAgBD,SAAhB,CAA0BE,KAA1B,EAAlB;AACA,MAAIC,aAAa,GAAG,KAApB;AACAH,EAAAA,SAAS,CAACI,OAAV,CAAmBC,CAAD,IAAO;AACrB,QAAGA,CAAC,CAACC,GAAF,KAAUT,OAAO,CAACS,GAArB,EAAyB;AACrBH,MAAAA,aAAa,GAAG,IAAhB;AACAE,MAAAA,CAAC,CAACE,KAAF;AACH;AACJ,GALD;;AAMA,MAAG,CAACJ,aAAJ,EAAkB;AACdH,IAAAA,SAAS,CAACQ,IAAV,CAAe,EACX,GAAGX,OADQ;AAEXU,MAAAA,KAAK,EAAE;AAFI,KAAf;AAIH;;AACDT,EAAAA,QAAQ,CAAC;AACLW,IAAAA,IAAI,EAAEhB,WADD;AAELiB,IAAAA,OAAO,EAAE;AAAEV,MAAAA;AAAF;AAFJ,GAAD,CAAR;AAIAW,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAed,SAAf,CAAlC;AACH,CApBM;AAsBP,OAAO,MAAMe,cAAc,GAAIlB,OAAD,IAAa,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC/D,QAAMC,SAAS,GAAGD,QAAQ,GACrBE,IADa,CACRD,SADQ,CACEE,KADF,GAEbc,MAFa,CAELX,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAUT,OAAO,CAACS,GAFnB,CAAlB;AAGIR,EAAAA,QAAQ,CAAC;AACLW,IAAAA,IAAI,EAAEf,gBADD;AAELgB,IAAAA,OAAO,EAAE;AAAEV,MAAAA;AAAF;AAFJ,GAAD,CAAR;AAIAW,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAed,SAAf,CAAlC;AACP,CATM;AAWP,OAAO,MAAMiB,YAAY,GAAIpB,OAAD,IAAa,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC7D,QAAMC,SAAS,GAAGD,QAAQ,GAAGE,IAAX,CAAgBD,SAAhB,CAA0BE,KAA1B,EAAlB;AACA,MAAIC,aAAa,GAAG,KAApB;AACAH,EAAAA,SAAS,CAACI,OAAV,CAAmBC,CAAD,IAAO;AACrB,QAAGA,CAAC,CAACC,GAAF,KAAUT,OAAO,CAACS,GAArB,EAAyB;AACrBH,MAAAA,aAAa,GAAG,IAAhB;AACAE,MAAAA,CAAC,CAACE,KAAF;AACH;AACJ,GALD;;AAMA,MAAGJ,aAAa,IAAIN,OAAO,CAACU,KAAR,GAAgB,CAApC,EAAsC;AAClCP,IAAAA,SAAS,CAACkB,GAAV,CAAc;AACVrB,MAAAA;AADU,KAAd;AAGH;;AACDC,EAAAA,QAAQ,CAAC;AACLW,IAAAA,IAAI,EAAEd,aADD;AAELe,IAAAA,OAAO,EAAE;AAAEV,MAAAA;AAAF;AAFJ,GAAD,CAAR;AAIAW,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAed,SAAf,CAAlC;AACH,CAnBM","sourcesContent":["import { ADD_TO_CART, REMOVE_FROM_CART, DECREASE_CART } from '../types';\n\nexport const addToCart = (product) => (dispatch, getState) => {\n    const cartItems = getState().cart.cartItems.slice();\n    let alreadyExists = false;\n    cartItems.forEach((x) => {\n        if(x._id === product._id){\n            alreadyExists = true;\n            x.count++;\n        }\n    });\n    if(!alreadyExists){\n        cartItems.push({\n            ...product,\n            count: 1\n        });\n    }\n    dispatch({\n        type: ADD_TO_CART,\n        payload: { cartItems },\n    });\n    localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n};\n\nexport const removeFromCart = (product) => (dispatch, getState) => {\n    const cartItems = getState()\n        .cart.cartItems.slice()\n        .filter((x) => x._id !== product._id);\n        dispatch({\n            type: REMOVE_FROM_CART,\n            payload: { cartItems }\n        });\n        localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n};\n\nexport const decreaseCart = (product) => (dispatch, getState) => {\n    const cartItems = getState().cart.cartItems.slice();\n    let alreadyExists = false;\n    cartItems.forEach((x) => {\n        if(x._id === product._id){\n            alreadyExists = true;\n            x.count--;\n        }\n    });\n    if(alreadyExists && product.count < 1){\n        cartItems.pop({\n            product\n        });\n    }\n    dispatch({\n        type: DECREASE_CART,\n        payload: { cartItems },\n    });\n    localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n}"]},"metadata":{},"sourceType":"module"}